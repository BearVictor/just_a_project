from modules import *

legal_regexs = [
    re.compile(r'^Lot.*?\d{2,} (?P<legal>[A-Z\s]{3,})$'),
    re.compile(r'^Lot:.*TS: (?P<legal>[A-Z\s]{3,})$'),
    re.compile(r'^Lot:.*Parcel:[\s\d]+ (?P<legal>[A-Z\s]{3,} \d)$'),
    re.compile(r'^(?P<legal>[A-Z\s]+) [A-Z]+\.\.\.*$'),
    re.compile(r'^Parcel:.*TS:$'),
    re.compile(r'^Parcel:.*TS:[\s,.]+$'),
    re.compile(r'^Parcel:.*TS: (?P<legal>[A-Z\s]{3,})$'),
    re.compile(r'^Parcel:.*TS: (?P<legal>[A-Z\s]{3,}) [A-Z]+\.\.\.*$'),
    re.compile(r'^Parcel:.*TS: (?P<legal>[A-Z\s]{3,}), \.\.\.*$'),
    re.compile(r'^Parcel:.*TS: (?P<legal>[A-Z\s]{3,}) [A-Z]+[\.,\s]+$'),
    re.compile(r'^Parcel:.*TS (?P<legal>[A-Z\s]{3,}) [A-Z]+\.\.\.$'),
    re.compile(r'^Parcel:.*TS:(?P<legal>[A-Z\s]{3,}) [A-Z]+\.\.\.*$'),
    re.compile(r'^Parcel:.*\d{3} TS (?P<legal>[A-Z\s]{3,})$'),
    re.compile(r'^Parcel:.*TS: (?P<legal>[A-Z\s]{3,}) \.\.\.$'),
    re.compile(r'^Parcel:.*TS;$'),
    re.compile(r'^Parcel:.*TS:ETC$'),
    re.compile(r'^Parcel:.*TS: -$'),
    re.compile(r'^Parcel:.*TS :$'),
    re.compile(r'^Parcel:.*Case: [\s\d.]+$'),
    re.compile(r'^Parcel:[\d\s]+$'),
    re.compile(r'^Parcel:[\d\s]+ (?P<legal>[A-Z\s]+)$'),
    re.compile(r'^Parcel: [\d\s]+  , \.+$'),
    re.compile(r'^Parcel: [\d\s]+ , \.+$'),
    re.compile(r'^Parcel:[\s\d]+:[\s,.]+$'),
    re.compile(r'^Unit:.*TS: (?P<legal>[A-Z\s]{3,})$'),
    re.compile(r'^Unit:.*TS: (?P<legal>[A-Z\s]{3,}) [A-Z]+[., ]+$'),
    re.compile(r'^Unit:.*TS: (?P<legal>[A-Z\s]{3,}) \.+$'),
    re.compile(r'^Unit:.*TS (?P<legal>[A-Z\s]{3,}) [A-Z]+[., ]+$'),
    re.compile(r'^Unit:.*TS:(?P<legal>[A-Z\s]{3,}) [A-Z]+\.+$'),
    re.compile(r'^Unit:.*TS: (?P<legal>F FAIRFIELD)\.\.\.$'),
    re.compile(r'^Unit:.*TS:(?P<legal>FAIRFIELD)\.+$'),
    re.compile(r'^Unit:.*TS; (?P<legal>[A-Z\s]{3,}) [A-Z]\.\.\.$'),
    re.compile(r'^Unit:.*TS; (?P<legal>[A-Z\s]{3,}) [A-Z]+\.+$'),
    re.compile(r'^Unit:.*TS:(?P<legal>[A-Z\s]{3,})$'),
    re.compile(r'^Unit:.*TS:ETC$'),
    re.compile(r'^Unit:.*TS [A-Z]+[., ]+$'),
    re.compile(r'^Unit:.*TS: \d+ [A-Z]+\.+$'),
    re.compile(r'^Unit:.*TS:$'),
    re.compile(r'^Unit:.*TS: \w+\.+$'),
    re.compile(r'^Week:.*TS: (?P<legal>[A-Z\s]{3,})$'),
    re.compile(r'^Week:.*Parcel:[\s\d]+[A-Z]{1,2}\.+$'),
    re.compile(r'^Week:.*Parcel:[\s\d]+(?P<legal>[A-Z]{3})\.+$'),
    re.compile(r'^Week:.*TS: (?P<legal>[A-Z\s]{3,})$'),
    re.compile(r'^Week:.*TS: \w+\.+$'),
    re.compile(r'^Week:.*\d+ TS \w+\.+$'),
    re.compile(r'^Week:.*TS:$'),
    re.compile(r'^Week:.*TS: (?P<legal>[A-Z\s]{3,}) \.+$'),
    re.compile(r'^Week:.*TS: [A-Z]+\.[.,\s]+$'),
    re.compile(r'^Week:.*Parcel:[\s\d]+ [A-Z]+\.+$'),
    re.compile(r'^Week:.*TS: [A-Z]+\.+$'),
    re.compile(r'^Week:.*TS: (?P<legal>[A-Z\s]{3,})$'),
    re.compile(r'^Week:.*TS:\.+$'),
    re.compile(r'^Week:.*TS$'),
    re.compile(r'^Week:.*Parcel:[\d\s]+ ET[,.\s]+$'),
    re.compile(r'^Week:.*Parcel:[\d\s]+ TD WES\.+$'),
    re.compile(r'^Week:.*Parcel:[\d\s]+ TS:[\s.]+$'),
    re.compile(r'^Lot:.*TS: [A-Z]+\.+$'),
    re.compile(r'^Week:.*TS: (?P<legal>[A-Z\s]{3,}) [A-Z]+\.+$'),
    re.compile(r'^Week:.*Case: \.+$'),
    re.compile(r'^Week:.*TS: (?P<legal>[A-Z\s]{3,}) \.+$'),
    re.compile(r'^Week:.*Parcel:[\d\s]+$'),
    re.compile(r'^Week:.*Parcel:[\d\s]+ \.+$'),
    re.compile(r'^Week:.*Parcel:[\d\s]+ TSL WE\.+$'),
    re.compile(r'^Week:.*Parcel:[\d\s]+ TSL WE\.+$'),
    re.compile(r'^Week:.*Parcel:.*TS:OR\.\.\.$'),
    re.compile(r'^Week:.*Parcel: [\d\s.]+$'),
    re.compile(r'^Week:.*TS: (?P<legal>[A-Z\s]{3,}) ETC, \.+$'),
    re.compile(r'^TS: KKKE$'),
    re.compile(r'^TS:$'),
    re.compile(r'^TS$'),
    re.compile(r'^TS:[\s.,]+$'),
    re.compile(r'^TS,[\s.,]+$'),
    re.compile(r'^TS:.*ETC$'),
    re.compile(r'^TS:[\s\d]+\d$'),
    re.compile(r'^[\s.,]+$'),
    re.compile(r'^Case:.*TS:$'),
    re.compile(r'^TS: (?P<legal>[A-Z\s]+)$'),
    re.compile(r'^TS: (?P<legal>[A-Z\s]{3,}) \.\.+$'),
    re.compile(r'^Unit:.*TS: (?P<legal>[A-Z\s]{3,}) [A-Z]+\.\.+$'),
    re.compile(r'^Lot:.*TS:$'),
    re.compile(r'^Lot:.*TS: (?P<legal>[A-Z\s]{3,}) [A-Z]+\.\.\.$'),
    re.compile(r'^TS (?P<legal>O RANGE LAKE COUNTRY CLUB VILLAS IV)$'),
    re.compile(r'^TS: (?P<legal>ORANGE L4KE COUNTRY CLUB VILLAS IV)$'),
    re.compile(r'^TS: (?P<legal>[A-Z\s]{3,}), \.\.\.+$'),
    re.compile(r'^TS:(?P<legal>[A-Z\s]{3,})$'),
    re.compile(r'^Week:.*TS: (?P<legal>[A-Z\s]{3,}), \.\.\.+$'),
    re.compile(r'^Week:.*TS (?P<legal>[A-Z\s]{3,}) [A-Z]+\.\.\.$'),
    re.compile(r'^Week:.*TS: (?P<legal>[A-Z\s]{3,}) [A-Z]+[,.]+ \.\.\.$'),
    re.compile(r'^Week:.*TS: (?P<legal>[A-Z\s]{3,} \d)$'),
    re.compile(r'^Week:.*TS (?P<legal>[A-Z\s]{3,})$'),
    re.compile(r'^Week:.*TS:(?P<legal>[A-Z\s]{3,} VILLAS)\.\.\.$'),
    re.compile(r'^Week:.*TS; (?P<legal>[A-Z\s]{3,}) [A-Z]+\.\.\.$'),
    re.compile(r'^Week:.*TS:(?P<legal>[A-Z\s]{3,}) [A-Z]+\.\.\.$'),
    re.compile(r'^Week:.*TS:(?P<legal>[A-Z\s]{3,}) [A-Z]+\.\.\.$'),
    re.compile(r'^Week:.*TS:(?P<legal>[A-Z\s]{3,})$'),
    re.compile(r'^Week:.*TS:(?P<legal>[A-Z\s]{3,} \d)$'),
    re.compile(r'^Week:.*TS: ST [.,\s]+$'),
    re.compile(r'^Week:.*TS:  [A-Z]+\.\.\.$'),
    re.compile(r'^Week:.*TS:[A-Z]+\.\.\.$'),
    re.compile(r'^Week:.*TS:[A-Z]+\.\.\., \.\.\.$'),
    re.compile(r'^Week:.*TS; [A-Z]+\.\.\.$'),
    re.compile(r'^Week:.*TS\.\.\.$'),
    re.compile(r'^Week:.*TS: \.\.\.$'),
    re.compile(r'^Week:.*Unit:[\d\s.,]+$'),
    re.compile(r'^Week:.*Unit: \d+   (?P<legal>[A-Z\s]{3,}) [A-Z]+\.\.\.$'),
    re.compile(r'^Week:.*Case: \d+\.\.\.$'),
    re.compile(r'^WK 4 UN 2447 (?P<legal>[A-Z\s]{3,}), \.\.\.$'),
]

raw_legal = 'WK 4 UN 2447 VISTANA CASCADES, ...'
legal = ''
for legal_regex in legal_regexs:
    found = legal_regex.search(raw_legal)
    if found:
        print(legal_regex)
        legal = try_excetp_re(found, 'legal')
        break

more_filters = ['ETC', 'TS', 'KEY', 'ST']
if legal in more_filters:
    legal = ''
print({legal})